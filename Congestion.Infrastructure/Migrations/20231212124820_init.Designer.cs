// <auto-generated />
using System;
using Congestion.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Congestion.Infrastructure.Migrations
{
    [DbContext(typeof(CongestionContext))]
    [Migration("20231212124820_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionDomain.Entities.Calender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTollExempDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Calender", (string)null);
                });

            modelBuilder.Entity("CongestionDomain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsTollIncluded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("CarId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("CongestionDomain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("CongestionDomain.Entities.CongestionPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CongestionPlace", (string)null);
                });

            modelBuilder.Entity("CongestionDomain.Entities.TimeToll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TollAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TimeToll", (string)null);
                });

            modelBuilder.Entity("CongestionDomain.Entities.TollRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalenderId")
                        .HasColumnType("int");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CongestionPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("TimeTollId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalenderId");

                    b.HasIndex("CarId");

                    b.HasIndex("CongestionPlaceId");

                    b.HasIndex("TimeTollId");

                    b.ToTable("TollRegistration", (string)null);
                });

            modelBuilder.Entity("CongestionDomain.Entities.CongestionPlace", b =>
                {
                    b.HasOne("CongestionDomain.Entities.City", null)
                        .WithMany("Congestions")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionDomain.Entities.TimeToll", b =>
                {
                    b.HasOne("CongestionDomain.Entities.City", "City")
                        .WithMany("TimeTolls")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CongestionDomain.Entities.TollRegistration", b =>
                {
                    b.HasOne("CongestionDomain.Entities.Calender", "Calender")
                        .WithMany("TollRegistrations")
                        .HasForeignKey("CalenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CongestionDomain.Entities.Car", null)
                        .WithMany("TollRegistrations")
                        .HasForeignKey("CarId");

                    b.HasOne("CongestionDomain.Entities.CongestionPlace", "CongestionPlace")
                        .WithMany("TollRegistrations")
                        .HasForeignKey("CongestionPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CongestionDomain.Entities.TimeToll", "TimeToll")
                        .WithMany("TollRegistrations")
                        .HasForeignKey("TimeTollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calender");

                    b.Navigation("CongestionPlace");

                    b.Navigation("TimeToll");
                });

            modelBuilder.Entity("CongestionDomain.Entities.Calender", b =>
                {
                    b.Navigation("TollRegistrations");
                });

            modelBuilder.Entity("CongestionDomain.Entities.Car", b =>
                {
                    b.Navigation("TollRegistrations");
                });

            modelBuilder.Entity("CongestionDomain.Entities.City", b =>
                {
                    b.Navigation("Congestions");

                    b.Navigation("TimeTolls");
                });

            modelBuilder.Entity("CongestionDomain.Entities.CongestionPlace", b =>
                {
                    b.Navigation("TollRegistrations");
                });

            modelBuilder.Entity("CongestionDomain.Entities.TimeToll", b =>
                {
                    b.Navigation("TollRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
